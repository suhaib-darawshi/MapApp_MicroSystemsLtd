{"version":3,"file":"CustomSocketService.js","sourceRoot":"src/","sources":["services/CustomSocketService.ts"],"names":[],"mappings":";;;;AAAA,iCAAkC;AAClC,6CAA6E;AAC7E,4DAAsC;AACtC,yDAAsD;AAO/C,IAAM,mBAAmB,GAAzB,MAAM,mBAAmB;IAMJ;IAAqD;IALxE,GAAG,CAAqB;IACrB,OAAO,GAAiC,IAAI,GAAG,EAAE,CAAC;IAE5D,QAAQ,CAAqB;IAE7B,YAA0B,EAAmB,EAAkC,eAAgC;QAArF,OAAE,GAAF,EAAE,CAAiB;QAAkC,oBAAe,GAAf,eAAe,CAAiB;IAAG,CAAC;IACnH,KAAK,CAAC,EAAkB;QACtB,IAAI,CAAC,EAAE,GAAC,EAAE,CAAC;IACb,CAAC;IACD,gBAAgB,CAAC,GAAuB,IAAG,CAAC;IAC5C,aAAa,CAAS,MAAuB,EAAiB,OAAsB;QAClF,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QACpB,MAAM,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC,IAAY,EAAE,EAAE;YAClC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAA;YACf,IAAI,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,EAAE,MAAM,CAAC,CAAC;QACtC,CAAC,CAAC,CAAC;QACH,MAAM,CAAC,EAAE,CAAC,cAAc,EAAC,KAAK,EAAC,IAAQ,EAAC,EAAE;YACxC,MAAM,SAAS,GAAC,MAAM,IAAI,CAAC,eAAe,CAAC,YAAY,CAAC,IAAI,CAAC,SAAS,EAAC,IAAI,CAAC,SAAS,CAAC,CAAC;YACvF,IAAG,SAAS,CAAC,MAAM,IAAE,CAAC,EAAC,CAAC;gBACtB,MAAM,CAAC,IAAI,CAAC,eAAe,EAAC,SAAS,CAAC,CAAC;YACzC,CAAC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IACD,aAAa,CAAS,MAAuB;QAC3C,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,OAAO,EAAE,EAAE,EAAE,EAAE;YACjC,IAAG,MAAM,CAAC,EAAE,IAAE,OAAO,CAAC,EAAE,EAAC,CAAC;gBACtB,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE,CAAC,CAAC;gBACxB,OAAO,CAAC,GAAG,CAAC,GAAG,EAAE,mBAAmB,CAAC,CAAC;YAC1C,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;CAEF,CAAA;AAjCY,kDAAmB;AACvB;IAAJ,cAAG;sCAAM,QAAQ,CAAC,SAAS;gDAAC;AAG/B;IADC,IAAA,cAAG,EAAC,GAAG,CAAC;sCACC,QAAQ,CAAC,SAAS;qDAAC;AAO7B;IAAe,mBAAA,iBAAM,CAAA;IAA2B,mBAAA,wBAAa,CAAA;;6CAA/B,QAAQ,CAAC,MAAM;;wDAY5C;AACD;IAAe,mBAAA,iBAAM,CAAA;;6CAAS,QAAQ,CAAC,MAAM;;wDAO5C;8BA/BU,mBAAmB;IAD/B,IAAA,wBAAa,EAAC,QAAQ,CAAC;IAOT,mBAAA,IAAA,aAAE,GAAE,CAAA;IAA8B,mBAAA,IAAA,WAAM,EAAC,mCAAgB,CAAC,CAAA;6CAAzC,QAAQ,CAAC,MAAM,EAAkD,mCAAgB;GANpG,mBAAmB,CAiC/B","sourcesContent":["import { Inject } from \"@tsed/di\";\nimport {IO, Nsp, Socket, SocketService, SocketSession} from \"@tsed/socketio\";\nimport * as SocketIO from \"socket.io\";\nimport { LocationsService } from \"./LocationsService\";\ninterface Client {\n    sensors:string[]\n    id: string;\n  }\n  \n@SocketService(\"socket\")\nexport class CustomSocketService {\n    @Nsp nsp: SocketIO.Namespace;\n    private clients: Map<string, SocketIO.Socket> = new Map();\n  @Nsp(\"/\")\n  nspOther: SocketIO.Namespace; \n\n  constructor(@IO() private io: SocketIO.Server,@Inject(LocationsService)private locationService:LocationsService) {}\n  setIo(io:SocketIO.Server){\n    this.io=io;\n  }\n  $onNamespaceInit(nsp: SocketIO.Namespace) {}\n  $onConnection(@Socket socket: SocketIO.Socket, @SocketSession session: SocketSession) {\n    console.log(\"user\");\n    socket.on(\"setId\", (data: Client) => {\n      console.log(data)\n        this.clients.set(data.id, socket);\n    });\n    socket.on(\"View Changed\",async(data:any)=>{\n      const locations=await this.locationService.getLocations(data.northeast,data.southwest);\n      if(locations.length!=0){\n        socket.emit(\"New Locations\",locations);\n      }\n    });\n  }\n  $onDisconnect(@Socket socket: SocketIO.Socket) {\n    this.clients.forEach((sockett, id) =>{\n        if(socket.id==sockett.id){\n            this.clients.delete(id);\n            console.log(`${id} has disconnected`);\n        }\n    });\n  }\n  \n}\n"]}